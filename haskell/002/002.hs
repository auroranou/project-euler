-- Each new term in the Fibonacci sequence is generated by adding the previous two terms.
-- By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

-- By considering the terms in the Fibonacci sequence whose values do not exceed four million,
-- find the sum of the even-valued terms.

-- List of numbers consisting of zipped tuples (a, b) where a has index i
-- and b has index i + 1 (this is an infinite list comprehension)
fib = [ a + b | (a, b) <- zip (0 : fib) (0 : 1 : fib) ]

-- Sublist of Fibonacci numbers less than 4 million
fibList = takeWhile (< 4000000) fib

-- Function that takes a list, returns a list of even elements, and sums them
sumEven :: Integral a => [a] -> a
sumEven list = sum [ x | x <- list, x `mod` 2 == 0 ]

-- Apply sumEven function to the list of Fibonnaci numbers smaller than 4 million
sum' = sumEven fibList